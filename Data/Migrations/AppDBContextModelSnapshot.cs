// <auto-generated/>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hometask.Data;

#nullable disable

namespace hometask.Data.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("hometask.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserAddress = "Tel Aviv",
                            UserId = "a5dc91cd-3b3f-4894-b72d-69aca0ff0adb"
                        },
                        new
                        {
                            Id = 2,
                            UserAddress = "Haifa",
                            UserId = "435ea910-26d6-4d0e-8544-3c05cb5d73fa"
                        },
                        new
                        {
                            Id = 3,
                            UserAddress = "Ashdod",
                            UserId = "fe572c65-d902-4e1e-821c-1623a9339b10"
                        },
                        new
                        {
                            Id = 4,
                            UserAddress = "Tel Aviv",
                            UserId = "b65c5224-4bdd-43d8-a2bc-4c63a68fe6e9"
                        },
                        new
                        {
                            Id = 5,
                            UserAddress = "Ramat Gan",
                            UserId = "ed93b446-9ccc-4f07-a8ff-b24bb0475a2d"
                        },
                        new
                        {
                            Id = 6,
                            UserAddress = "Tel Aviv",
                            UserId = "03351434-48d3-40f6-9f81-21087c9152c0"
                        },
                        new
                        {
                            Id = 7,
                            UserAddress = "Haifa",
                            UserId = "c7c38460-9b45-4e17-906d-6341313ea32a"
                        },
                        new
                        {
                            Id = 8,
                            UserAddress = "Ashdod",
                            UserId = "c53bba58-2e27-4fb8-9ef3-5ededc07014c"
                        },
                        new
                        {
                            Id = 9,
                            UserAddress = "Tel Aviv",
                            UserId = "1b3e8cd1-fa6a-4cbb-b3dd-a8689f0260bf"
                        },
                        new
                        {
                            Id = 10,
                            UserAddress = "Ramat Gan",
                            UserId = "0e4316e0-e503-40bd-9bfe-de4839e3b1a3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a5dc91cd-3b3f-4894-b72d-69aca0ff0adb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2922aeef-2f66-464b-87b3-4f1b51c4bd48",
                            Email = "coral@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "CORAL@GMAIL.COM",
                            NormalizedUserName = "CORAL AVITAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEIkjOJYTX7boImtKuqWiDiIf/JbdTS8X7s9193QenxtueU2U9CZ/rWGITFCLmbuAGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb8efde0-21d5-40c9-8804-7efb096308a8",
                            TwoFactorEnabled = false,
                            UserName = "Coral Avital"
                        },
                        new
                        {
                            Id = "435ea910-26d6-4d0e-8544-3c05cb5d73fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eaa2dd78-b520-41e8-a889-c21c737e0db5",
                            Email = "rinat@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "RINAT@GMAIL.COM",
                            NormalizedUserName = "RINAT ATIAS",
                            PasswordHash = "AQAAAAEAACcQAAAAEHF7ZaO3kgkzMGJB5L9zdCmu88M/tQbJSX91mKRjwcB/C+dGXyeImm5UkuKnnqyWMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "752ae343-3076-4e04-9cd6-627efef14f54",
                            TwoFactorEnabled = false,
                            UserName = "Rinat Atias"
                        },
                        new
                        {
                            Id = "fe572c65-d902-4e1e-821c-1623a9339b10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b54f7d9e-889c-441f-932e-355d81334a8b",
                            Email = "bar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "BAR@GMAIL.COM",
                            NormalizedUserName = "BAR AVITAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEC943x9C6RinP/CzGt3FCnOOBQ6uRNijx7ex65LZ8t6u9p0mmIfadU7jz77opSGMdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7ee7089-7428-426f-acba-88a247bb189d",
                            TwoFactorEnabled = false,
                            UserName = "Bar Avital"
                        },
                        new
                        {
                            Id = "b65c5224-4bdd-43d8-a2bc-4c63a68fe6e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d63c59b5-b5ce-41bd-a0b7-f6386876ac02",
                            Email = "adir@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADIR@GMAIL.COM",
                            NormalizedUserName = "ADIR ALFASI",
                            PasswordHash = "AQAAAAEAACcQAAAAEAU90G8ckROi8IjCm7BB1qz12LIGMH1AGHPM+yQT1CjWo4/hsXwpVSqf6MLA39kUQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e454322-88bd-4dd2-afb1-9427b1813fed",
                            TwoFactorEnabled = false,
                            UserName = "Adir Alfasi"
                        },
                        new
                        {
                            Id = "ed93b446-9ccc-4f07-a8ff-b24bb0475a2d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54ed5d75-db52-4a64-b6fc-0dd069671453",
                            Email = "amit@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "AMIT@GMAIL.COM",
                            NormalizedUserName = "AMIT AVITAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJWu2UHlSs4H30oqv2sgtwqB37422LB9MK5lUOVNjeIVhtTCvSsQsadMc7NA5sKOSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aac6d7ae-422e-4784-a3bd-3ed63eb43fca",
                            TwoFactorEnabled = false,
                            UserName = "Amit Avital"
                        },
                        new
                        {
                            Id = "03351434-48d3-40f6-9f81-21087c9152c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5194d8c6-2e11-46fe-b40f-df73b4ddf811",
                            Email = "tali@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "TALI@GMAIL.COM",
                            NormalizedUserName = "TALI LEVI",
                            PasswordHash = "AQAAAAEAACcQAAAAEHcd5M8V1XN9/a7lSgfmU7n5TmnA2pELCmFeFcaZhIwtjuM8yl7GbxNGOnPkt8IEag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "332fc3aa-292e-400b-97f3-1e3049108aa2",
                            TwoFactorEnabled = false,
                            UserName = "Tali Levi"
                        },
                        new
                        {
                            Id = "c7c38460-9b45-4e17-906d-6341313ea32a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3a648cf-770e-41d1-877c-30fd66faebb8",
                            Email = "tami@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "TAMI@GMAIL.COM",
                            NormalizedUserName = "TAMI VANUNU",
                            PasswordHash = "AQAAAAEAACcQAAAAEI7jyqQIoOmQBixRNKjy3bGeaExWVvO9MoNFTd+CePAbRdgF3IF+9MafRvcaz5LIwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f2fc4a3-74ce-40a2-ac7d-264a74f582ff",
                            TwoFactorEnabled = false,
                            UserName = "Tami Vanunu"
                        },
                        new
                        {
                            Id = "c53bba58-2e27-4fb8-9ef3-5ededc07014c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecdbedf8-db58-466d-99bf-72870f143d81",
                            Email = "eli@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ELI@GMAIL.COM",
                            NormalizedUserName = "ELI DAHAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEE3rtWWaQ0nM85Xv2x1v8/Sb5CGzJA22A+HWk/E5gFDoHrX1oFlw8IFJlFmfYevzeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0352f586-d9c6-4014-8129-b68c4eccfe42",
                            TwoFactorEnabled = false,
                            UserName = "Eli Dahan"
                        },
                        new
                        {
                            Id = "1b3e8cd1-fa6a-4cbb-b3dd-a8689f0260bf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87c7017d-1d8f-4d2b-8c1a-a7ddb5401301",
                            Email = "iris@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "IRIS@GMAIL.COM",
                            NormalizedUserName = "IRIS AVITAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEExUxsLd4rInB8zvHaE9E23BV1VmGV/r0s3FqDZDLaL9g3eQwimNqlqsTW0CORuP+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f19118e-0079-4b86-8204-85235a39dbc2",
                            TwoFactorEnabled = false,
                            UserName = "Iris Avital"
                        },
                        new
                        {
                            Id = "0e4316e0-e503-40bd-9bfe-de4839e3b1a3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e731d83f-7c4e-4203-a41d-ac31121af6ae",
                            Email = "shir@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "SHIR@GMAIL.COM",
                            NormalizedUserName = "SHIR LEVI",
                            PasswordHash = "AQAAAAEAACcQAAAAEL4wDKyajEIvZB+lWisccuhMK7hwwkWEZ+OW9teu4AChS74VRcHWrZJwjp3cY9VM+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4868ace-f007-4a9d-8a49-47f69c98ce04",
                            TwoFactorEnabled = false,
                            UserName = "Shir Levi"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
